<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics.Vectors</name>
    </assembly>
    <members>
        <member name="M:System.Numerics.HashCodeHelper.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes, useful for combining hash codes of individual vector elements
            </summary>
        </member>
        <member name="T:System.Numerics.JitIntrinsicAttribute">
            <summary>
            An attribute that can be attached to JIT Intrinsic methods/properties
            </summary>
        </member>
        <member name="T:System.Numerics.Register">
            <summary>
            A structure describing the layout of an SSE2-sized register.
            Contains overlapping fields representing the set of valid numeric types.
            Allows the generic Vector'T struct to contain an explicit field layout.
            </summary>
        </member>
        <member name="T:System.Numerics.Vector`1">
            <summary>
            A structure that represents a single Vector. The count of this Vector is fixed but CPU register dependent.
            This struct only supports numerical types. This type is intended to be used as a building block for vectorizing
            large algorithms. This type is immutable, individual elements cannot be modified.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector`1.Count">
            <summary>
            Returns the number of elements stored in the vector. This value is hardware dependent.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector`1.Zero">
            <summary>
            Returns a vector containing all zeroes.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector`1.One">
            <summary>
            Returns a vector containing all ones.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0)">
            <summary>
            Constructs a vector whose components are all <code>value</code>
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
            <summary>
            Constructs a vector from the given array. The size of the given array must be at least Vector'T.Count.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
            <summary>
            Constructs a vector from the given array, starting from the given index.
            The array must contain at least Vector'T.Count from the given index.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
            <summary>
            Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
            </summary>
            <param name="destination">The destination array which the values are copied into</param>
            <exception cref="T:System.ArgumentNullException">If the destination array is null</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
            </summary>
            <param name="destination">The destination array which the values are copied into</param>
            <param name="startIndex">The index to start copying to</param>
            <exception cref="T:System.ArgumentNullException">If the destination array is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
            <summary>
            Returns the element at the given index.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this vector instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this vector; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
            <summary>
            Returns a boolean indicating whether the given vector is equal to this vector instance.
            </summary>
            <param name="other">The vector to compare this instance to.</param>
            <returns>True if the other vector is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.ToString">
            <summary>
            Returns a String representing this vector.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.ToString(System.String)">
            <summary>
            Returns a String representing this vector, using the specified format string to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this vector, using the specified format string to format individual elements
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="value">The source vector.</param>
            <param name="factor">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="factor">The scalar value.</param>
            <param name="value">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Returns a new vector by performing a bitwise-and operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Returns a new vector by performing a bitwise-or operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Returns a new vector by performing a bitwise-exclusive-or operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
            <summary>
            Returns a new vector whose elements are obtained by taking the one's complement of the given vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The one's complement vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Returns a boolean indicating whether each pair of elements in the given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The first vector to compare.</param>
            <returns>True if all elements are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
            <summary>
            Returns a boolean indicating whether any single pair of elements in the given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any element pairs are equal; False if no element pairs are equal.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
            <summary>
            Reinterprets the bits of the given vector into those of another type.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="T:System.Numerics.Vector">
            <summary>
            Contains various methods useful for creating, manipulating, combining, and converting generic vectors with one another.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
            </summary>
            <param name="condition">The integral mask vector used to drive selection.</param>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The new vector with elements selected based on the mask.</returns>
        </member>
        <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
            </summary>
            <param name="condition">The integral mask vector used to drive selection.</param>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The new vector with elements selected based on the mask.</returns>
        </member>
        <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
            </summary>
            <param name="condition">The mask vector used to drive selection.</param>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The new vector with elements selected based on the mask.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left and right were equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Returns an integral vector whose elements signal whether elements in the left and right floating point vectors were equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left and right were equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Returns an integral vector whose elements signal whether elements in the left and right floating point vectors were equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left and right were equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether each pair of elements in the given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The first vector to compare.</param>
            <returns>True if all elements are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether any single pair of elements in the given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any element pairs are equal; False if no element pairs are equal.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were less than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were less than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether all of the elements in left are less than their corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if all elements in left are less than their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether any element in left is less than its corresponding element in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any elements in left are less than their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were less than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were less than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were less than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether all elements in left are less than or equal to their corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if all elements in left are less than or equal to their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether any element in left is less than or equal to its corresponding element in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any elements in left are less than their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were greater than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were greater than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether all elements in left are greater than the corresponding elements in right.
            elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if all elements in left are greater than their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether any element in left is greater than its corresponding element in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any elements in left are greater than their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were greater than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
            <summary>
            Returns a new vector whose elements signal whether the elements in left were greater than or equal to their
            corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
            <summary>
            Returns an integral vector whose elements signal whether the elements in left were greater than or equal to 
            their corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>The resultant integral vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether all of the elements in left are greater than or equal to 
            their corresponding elements in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if all elements in left are greater than or equal to their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a boolean indicating whether any element in left is greater than or equal to its corresponding element in right.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if any elements in left are greater than or equal to their corresponding elements in right; False otherwise.</returns>
        </member>
        <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
            <summary>
            Returns whether or not vector operations are subject to hardware acceleration through JIT intrinsic support.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are the absolute values of the given vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The minimum vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The maximum vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are the square roots of the given vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Creates a new vector whose values are the sum of each pair of elements from the two given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Creates a new vector whose values are the difference between each pairs of elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Creates a new vector whose values are the product of each pair of elements from the two given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
            <summary>
            Returns a new vector whose values are the values of the given vector each multiplied by a scalar value.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose values are the values of the given vector each multiplied by a scalar value.
            </summary>
            <param name="left">The scalar factor.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose values are the result of dividing the first vector's elements 
            by the corresponding elements in the second vector.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are the given vector's elements negated.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector by performing a bitwise-and operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector by performing a bitwise-or operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector whose elements are obtained by taking the one's complement of the given vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The one's complement vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector by performing a bitwise-exclusive-or operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector by performing a bitwise-and-not operation on each of the elements in the given vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The resultant vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of unsigned bytes.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of signed bytes.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of 16-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of signed 16-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of unsigned 32-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of signed 32-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of unsigned 64-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of signed 64-bit integers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of 32-bit floating point numbers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
            <summary>
            Reinterprets the bits of the given vector into those of a vector of 64-bit floating point numbers.
            </summary>
            <param name="value">The source vector</param>
            <returns>The reinterpreted vector.</returns>
        </member>
    </members>
</doc>
